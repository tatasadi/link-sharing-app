name: Deploy to Ubuntu Server

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  IMAGE_NAME: link-sharing-app
  CONTAINER_NAME: link-sharing-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.IMAGE_NAME }}:latest
          outputs: type=docker,dest=/tmp/${{ env.IMAGE_NAME }}.tar

      - name: Upload and deploy Docker image
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # Stop and remove existing container
            docker stop ${{ env.CONTAINER_NAME }} || true
            docker rm ${{ env.CONTAINER_NAME }} || true

            # Remove old image
            docker rmi ${{ env.IMAGE_NAME }}:latest || true

            # Create app directory if it doesn't exist
            mkdir -p ~/link-sharing-app

      - name: Copy Docker image to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          source: /tmp/${{ env.IMAGE_NAME }}.tar
          target: ~/link-sharing-app/

      - name: Load and run Docker container
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            cd ~/link-sharing-app

            # Load the Docker image
            docker load -i ${{ env.IMAGE_NAME }}.tar

            # Run the container with environment variables
            docker run -d \
              --name ${{ env.CONTAINER_NAME }} \
              --restart unless-stopped \
              -p 3003:3000 \
              -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              -e AUTH_SECRET="${{ secrets.AUTH_SECRET }}" \
              -e AZURE_STORAGE_CONNECTION_STRING="${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
              -e AZURE_STORAGE_CONTAINER_NAME="${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}" \
              -e AZURE_STORAGE_NAME="${{ secrets.AZURE_STORAGE_NAME }}" \
              -e NODE_ENV=production \
              ${{ env.IMAGE_NAME }}:latest

            # Clean up the uploaded tar file
            rm -f ${{ env.IMAGE_NAME }}.tar

            # Show container status
            docker ps | grep ${{ env.CONTAINER_NAME }}

            # Show logs
            echo "Container logs:"
            docker logs ${{ env.CONTAINER_NAME }} --tail 50